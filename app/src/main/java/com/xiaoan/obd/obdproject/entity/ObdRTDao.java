package com.xiaoan.obd.obdproject.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OBD_RT".
*/
public class ObdRTDao extends AbstractDao<ObdRT, Long> {

    public static final String TABLENAME = "OBD_RT";

    /**
     * Properties of entity ObdRT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Conten = new Property(1, String.class, "conten", false, "CONTEN");
        public final static Property ObdType = new Property(2, String.class, "obdType", false, "OBD_TYPE");
        public final static Property Sncode = new Property(3, int.class, "sncode", false, "SNCODE");
        public final static Property StrokeId = new Property(4, int.class, "strokeId", false, "STROKE_ID");
        public final static Property Identifiers = new Property(5, int.class, "identifiers", false, "IDENTIFIERS");
        public final static Property DataBytes = new Property(6, int.class, "dataBytes", false, "DATA_BYTES");
        public final static Property OccTime = new Property(7, int.class, "occTime", false, "OCC_TIME");
        public final static Property DataNum = new Property(8, int.class, "dataNum", false, "DATA_NUM");
        public final static Property BvatteryVol = new Property(9, double.class, "bvatteryVol", false, "BVATTERY_VOL");
        public final static Property Rpm = new Property(10, int.class, "rpm", false, "RPM");
        public final static Property Throttle = new Property(11, double.class, "throttle", false, "THROTTLE");
        public final static Property EngineLoad = new Property(12, double.class, "engineLoad", false, "ENGINE_LOAD");
        public final static Property WaterTemp = new Property(13, int.class, "waterTemp", false, "WATER_TEMP");
        public final static Property DrivingSpeed = new Property(14, int.class, "drivingSpeed", false, "DRIVING_SPEED");
        public final static Property AvgSpeed = new Property(15, int.class, "avgSpeed", false, "AVG_SPEED");
        public final static Property InstantFuel = new Property(16, double.class, "instantFuel", false, "INSTANT_FUEL");
        public final static Property AvgFuel = new Property(17, double.class, "avgFuel", false, "AVG_FUEL");
        public final static Property DrivingFuel = new Property(18, double.class, "drivingFuel", false, "DRIVING_FUEL");
        public final static Property TravelMileage = new Property(19, double.class, "travelMileage", false, "TRAVEL_MILEAGE");
        public final static Property Acceleration = new Property(20, int.class, "acceleration", false, "ACCELERATION");
        public final static Property Deceleration = new Property(21, int.class, "deceleration", false, "DECELERATION");
        public final static Property TravelTimes = new Property(22, int.class, "travelTimes", false, "TRAVEL_TIMES");
        public final static Property IdlingTimes = new Property(23, int.class, "idlingTimes", false, "IDLING_TIMES");
        public final static Property FaultCodeNum = new Property(24, int.class, "faultCodeNum", false, "FAULT_CODE_NUM");
        public final static Property FltireStatus = new Property(25, String.class, "fltireStatus", false, "FLTIRE_STATUS");
        public final static Property FltirePsi = new Property(26, double.class, "fltirePsi", false, "FLTIRE_PSI");
        public final static Property FltireTemp = new Property(27, double.class, "fltireTemp", false, "FLTIRE_TEMP");
        public final static Property FrtireStatus = new Property(28, String.class, "frtireStatus", false, "FRTIRE_STATUS");
        public final static Property FrtirePsi = new Property(29, double.class, "frtirePsi", false, "FRTIRE_PSI");
        public final static Property FrtireTemp = new Property(30, double.class, "frtireTemp", false, "FRTIRE_TEMP");
        public final static Property BltireStatus = new Property(31, String.class, "bltireStatus", false, "BLTIRE_STATUS");
        public final static Property BltirePsi = new Property(32, double.class, "bltirePsi", false, "BLTIRE_PSI");
        public final static Property BltireTemp = new Property(33, double.class, "bltireTemp", false, "BLTIRE_TEMP");
        public final static Property BrtireStatus = new Property(34, String.class, "brtireStatus", false, "BRTIRE_STATUS");
        public final static Property BrtirePsi = new Property(35, double.class, "brtirePsi", false, "BRTIRE_PSI");
        public final static Property BrtireTemp = new Property(36, double.class, "brtireTemp", false, "BRTIRE_TEMP");
        public final static Property Gps = new Property(37, String.class, "gps", false, "GPS");
        public final static Property Token = new Property(38, String.class, "token", false, "TOKEN");
        public final static Property UserCarID = new Property(39, String.class, "userCarID", false, "USER_CAR_ID");
        public final static Property UserCode = new Property(40, String.class, "userCode", false, "USER_CODE");
    };


    public ObdRTDao(DaoConfig config) {
        super(config);
    }
    
    public ObdRTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OBD_RT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"CONTEN\" TEXT," + // 1: conten
                "\"OBD_TYPE\" TEXT," + // 2: obdType
                "\"SNCODE\" INTEGER NOT NULL ," + // 3: sncode
                "\"STROKE_ID\" INTEGER NOT NULL ," + // 4: strokeId
                "\"IDENTIFIERS\" INTEGER NOT NULL ," + // 5: identifiers
                "\"DATA_BYTES\" INTEGER NOT NULL ," + // 6: dataBytes
                "\"OCC_TIME\" INTEGER NOT NULL ," + // 7: occTime
                "\"DATA_NUM\" INTEGER NOT NULL ," + // 8: dataNum
                "\"BVATTERY_VOL\" REAL NOT NULL ," + // 9: bvatteryVol
                "\"RPM\" INTEGER NOT NULL ," + // 10: rpm
                "\"THROTTLE\" REAL NOT NULL ," + // 11: throttle
                "\"ENGINE_LOAD\" REAL NOT NULL ," + // 12: engineLoad
                "\"WATER_TEMP\" INTEGER NOT NULL ," + // 13: waterTemp
                "\"DRIVING_SPEED\" INTEGER NOT NULL ," + // 14: drivingSpeed
                "\"AVG_SPEED\" INTEGER NOT NULL ," + // 15: avgSpeed
                "\"INSTANT_FUEL\" REAL NOT NULL ," + // 16: instantFuel
                "\"AVG_FUEL\" REAL NOT NULL ," + // 17: avgFuel
                "\"DRIVING_FUEL\" REAL NOT NULL ," + // 18: drivingFuel
                "\"TRAVEL_MILEAGE\" REAL NOT NULL ," + // 19: travelMileage
                "\"ACCELERATION\" INTEGER NOT NULL ," + // 20: acceleration
                "\"DECELERATION\" INTEGER NOT NULL ," + // 21: deceleration
                "\"TRAVEL_TIMES\" INTEGER NOT NULL ," + // 22: travelTimes
                "\"IDLING_TIMES\" INTEGER NOT NULL ," + // 23: idlingTimes
                "\"FAULT_CODE_NUM\" INTEGER NOT NULL ," + // 24: faultCodeNum
                "\"FLTIRE_STATUS\" TEXT," + // 25: fltireStatus
                "\"FLTIRE_PSI\" REAL NOT NULL ," + // 26: fltirePsi
                "\"FLTIRE_TEMP\" REAL NOT NULL ," + // 27: fltireTemp
                "\"FRTIRE_STATUS\" TEXT," + // 28: frtireStatus
                "\"FRTIRE_PSI\" REAL NOT NULL ," + // 29: frtirePsi
                "\"FRTIRE_TEMP\" REAL NOT NULL ," + // 30: frtireTemp
                "\"BLTIRE_STATUS\" TEXT," + // 31: bltireStatus
                "\"BLTIRE_PSI\" REAL NOT NULL ," + // 32: bltirePsi
                "\"BLTIRE_TEMP\" REAL NOT NULL ," + // 33: bltireTemp
                "\"BRTIRE_STATUS\" TEXT," + // 34: brtireStatus
                "\"BRTIRE_PSI\" REAL NOT NULL ," + // 35: brtirePsi
                "\"BRTIRE_TEMP\" REAL NOT NULL ," + // 36: brtireTemp
                "\"GPS\" TEXT," + // 37: gps
                "\"TOKEN\" TEXT," + // 38: token
                "\"USER_CAR_ID\" TEXT," + // 39: userCarID
                "\"USER_CODE\" TEXT);"); // 40: userCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OBD_RT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ObdRT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conten = entity.getConten();
        if (conten != null) {
            stmt.bindString(2, conten);
        }
 
        String obdType = entity.getObdType();
        if (obdType != null) {
            stmt.bindString(3, obdType);
        }
        stmt.bindLong(4, entity.getSncode());
        stmt.bindLong(5, entity.getStrokeId());
        stmt.bindLong(6, entity.getIdentifiers());
        stmt.bindLong(7, entity.getDataBytes());
        stmt.bindLong(8, entity.getOccTime());
        stmt.bindLong(9, entity.getDataNum());
        stmt.bindDouble(10, entity.getBvatteryVol());
        stmt.bindLong(11, entity.getRpm());
        stmt.bindDouble(12, entity.getThrottle());
        stmt.bindDouble(13, entity.getEngineLoad());
        stmt.bindLong(14, entity.getWaterTemp());
        stmt.bindLong(15, entity.getDrivingSpeed());
        stmt.bindLong(16, entity.getAvgSpeed());
        stmt.bindDouble(17, entity.getInstantFuel());
        stmt.bindDouble(18, entity.getAvgFuel());
        stmt.bindDouble(19, entity.getDrivingFuel());
        stmt.bindDouble(20, entity.getTravelMileage());
        stmt.bindLong(21, entity.getAcceleration());
        stmt.bindLong(22, entity.getDeceleration());
        stmt.bindLong(23, entity.getTravelTimes());
        stmt.bindLong(24, entity.getIdlingTimes());
        stmt.bindLong(25, entity.getFaultCodeNum());
 
        String fltireStatus = entity.getFltireStatus();
        if (fltireStatus != null) {
            stmt.bindString(26, fltireStatus);
        }
        stmt.bindDouble(27, entity.getFltirePsi());
        stmt.bindDouble(28, entity.getFltireTemp());
 
        String frtireStatus = entity.getFrtireStatus();
        if (frtireStatus != null) {
            stmt.bindString(29, frtireStatus);
        }
        stmt.bindDouble(30, entity.getFrtirePsi());
        stmt.bindDouble(31, entity.getFrtireTemp());
 
        String bltireStatus = entity.getBltireStatus();
        if (bltireStatus != null) {
            stmt.bindString(32, bltireStatus);
        }
        stmt.bindDouble(33, entity.getBltirePsi());
        stmt.bindDouble(34, entity.getBltireTemp());
 
        String brtireStatus = entity.getBrtireStatus();
        if (brtireStatus != null) {
            stmt.bindString(35, brtireStatus);
        }
        stmt.bindDouble(36, entity.getBrtirePsi());
        stmt.bindDouble(37, entity.getBrtireTemp());
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(38, gps);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(39, token);
        }
 
        String userCarID = entity.getUserCarID();
        if (userCarID != null) {
            stmt.bindString(40, userCarID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(41, userCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ObdRT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conten = entity.getConten();
        if (conten != null) {
            stmt.bindString(2, conten);
        }
 
        String obdType = entity.getObdType();
        if (obdType != null) {
            stmt.bindString(3, obdType);
        }
        stmt.bindLong(4, entity.getSncode());
        stmt.bindLong(5, entity.getStrokeId());
        stmt.bindLong(6, entity.getIdentifiers());
        stmt.bindLong(7, entity.getDataBytes());
        stmt.bindLong(8, entity.getOccTime());
        stmt.bindLong(9, entity.getDataNum());
        stmt.bindDouble(10, entity.getBvatteryVol());
        stmt.bindLong(11, entity.getRpm());
        stmt.bindDouble(12, entity.getThrottle());
        stmt.bindDouble(13, entity.getEngineLoad());
        stmt.bindLong(14, entity.getWaterTemp());
        stmt.bindLong(15, entity.getDrivingSpeed());
        stmt.bindLong(16, entity.getAvgSpeed());
        stmt.bindDouble(17, entity.getInstantFuel());
        stmt.bindDouble(18, entity.getAvgFuel());
        stmt.bindDouble(19, entity.getDrivingFuel());
        stmt.bindDouble(20, entity.getTravelMileage());
        stmt.bindLong(21, entity.getAcceleration());
        stmt.bindLong(22, entity.getDeceleration());
        stmt.bindLong(23, entity.getTravelTimes());
        stmt.bindLong(24, entity.getIdlingTimes());
        stmt.bindLong(25, entity.getFaultCodeNum());
 
        String fltireStatus = entity.getFltireStatus();
        if (fltireStatus != null) {
            stmt.bindString(26, fltireStatus);
        }
        stmt.bindDouble(27, entity.getFltirePsi());
        stmt.bindDouble(28, entity.getFltireTemp());
 
        String frtireStatus = entity.getFrtireStatus();
        if (frtireStatus != null) {
            stmt.bindString(29, frtireStatus);
        }
        stmt.bindDouble(30, entity.getFrtirePsi());
        stmt.bindDouble(31, entity.getFrtireTemp());
 
        String bltireStatus = entity.getBltireStatus();
        if (bltireStatus != null) {
            stmt.bindString(32, bltireStatus);
        }
        stmt.bindDouble(33, entity.getBltirePsi());
        stmt.bindDouble(34, entity.getBltireTemp());
 
        String brtireStatus = entity.getBrtireStatus();
        if (brtireStatus != null) {
            stmt.bindString(35, brtireStatus);
        }
        stmt.bindDouble(36, entity.getBrtirePsi());
        stmt.bindDouble(37, entity.getBrtireTemp());
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(38, gps);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(39, token);
        }
 
        String userCarID = entity.getUserCarID();
        if (userCarID != null) {
            stmt.bindString(40, userCarID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(41, userCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ObdRT readEntity(Cursor cursor, int offset) {
        ObdRT entity = new ObdRT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // conten
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // obdType
            cursor.getInt(offset + 3), // sncode
            cursor.getInt(offset + 4), // strokeId
            cursor.getInt(offset + 5), // identifiers
            cursor.getInt(offset + 6), // dataBytes
            cursor.getInt(offset + 7), // occTime
            cursor.getInt(offset + 8), // dataNum
            cursor.getDouble(offset + 9), // bvatteryVol
            cursor.getInt(offset + 10), // rpm
            cursor.getDouble(offset + 11), // throttle
            cursor.getDouble(offset + 12), // engineLoad
            cursor.getInt(offset + 13), // waterTemp
            cursor.getInt(offset + 14), // drivingSpeed
            cursor.getInt(offset + 15), // avgSpeed
            cursor.getDouble(offset + 16), // instantFuel
            cursor.getDouble(offset + 17), // avgFuel
            cursor.getDouble(offset + 18), // drivingFuel
            cursor.getDouble(offset + 19), // travelMileage
            cursor.getInt(offset + 20), // acceleration
            cursor.getInt(offset + 21), // deceleration
            cursor.getInt(offset + 22), // travelTimes
            cursor.getInt(offset + 23), // idlingTimes
            cursor.getInt(offset + 24), // faultCodeNum
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // fltireStatus
            cursor.getDouble(offset + 26), // fltirePsi
            cursor.getDouble(offset + 27), // fltireTemp
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // frtireStatus
            cursor.getDouble(offset + 29), // frtirePsi
            cursor.getDouble(offset + 30), // frtireTemp
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // bltireStatus
            cursor.getDouble(offset + 32), // bltirePsi
            cursor.getDouble(offset + 33), // bltireTemp
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // brtireStatus
            cursor.getDouble(offset + 35), // brtirePsi
            cursor.getDouble(offset + 36), // brtireTemp
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // gps
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // token
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // userCarID
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40) // userCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ObdRT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConten(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setObdType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSncode(cursor.getInt(offset + 3));
        entity.setStrokeId(cursor.getInt(offset + 4));
        entity.setIdentifiers(cursor.getInt(offset + 5));
        entity.setDataBytes(cursor.getInt(offset + 6));
        entity.setOccTime(cursor.getInt(offset + 7));
        entity.setDataNum(cursor.getInt(offset + 8));
        entity.setBvatteryVol(cursor.getDouble(offset + 9));
        entity.setRpm(cursor.getInt(offset + 10));
        entity.setThrottle(cursor.getDouble(offset + 11));
        entity.setEngineLoad(cursor.getDouble(offset + 12));
        entity.setWaterTemp(cursor.getInt(offset + 13));
        entity.setDrivingSpeed(cursor.getInt(offset + 14));
        entity.setAvgSpeed(cursor.getInt(offset + 15));
        entity.setInstantFuel(cursor.getDouble(offset + 16));
        entity.setAvgFuel(cursor.getDouble(offset + 17));
        entity.setDrivingFuel(cursor.getDouble(offset + 18));
        entity.setTravelMileage(cursor.getDouble(offset + 19));
        entity.setAcceleration(cursor.getInt(offset + 20));
        entity.setDeceleration(cursor.getInt(offset + 21));
        entity.setTravelTimes(cursor.getInt(offset + 22));
        entity.setIdlingTimes(cursor.getInt(offset + 23));
        entity.setFaultCodeNum(cursor.getInt(offset + 24));
        entity.setFltireStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFltirePsi(cursor.getDouble(offset + 26));
        entity.setFltireTemp(cursor.getDouble(offset + 27));
        entity.setFrtireStatus(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFrtirePsi(cursor.getDouble(offset + 29));
        entity.setFrtireTemp(cursor.getDouble(offset + 30));
        entity.setBltireStatus(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setBltirePsi(cursor.getDouble(offset + 32));
        entity.setBltireTemp(cursor.getDouble(offset + 33));
        entity.setBrtireStatus(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setBrtirePsi(cursor.getDouble(offset + 35));
        entity.setBrtireTemp(cursor.getDouble(offset + 36));
        entity.setGps(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setToken(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setUserCarID(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setUserCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ObdRT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ObdRT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
