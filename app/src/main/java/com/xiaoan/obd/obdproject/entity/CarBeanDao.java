package com.xiaoan.obd.obdproject.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR_BEAN".
*/
public class CarBeanDao extends AbstractDao<CarBean, Long> {

    public static final String TABLENAME = "CAR_BEAN";

    /**
     * Properties of entity CarBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCarID = new Property(1, String.class, "userCarID", false, "USER_CAR_ID");
        public final static Property BrandLogo = new Property(2, String.class, "brandLogo", false, "BRAND_LOGO");
        public final static Property CarSeriesName = new Property(3, String.class, "carSeriesName", false, "CAR_SERIES_NAME");
        public final static Property CarTypeName = new Property(4, String.class, "carTypeName", false, "CAR_TYPE_NAME");
        public final static Property Displacement = new Property(5, String.class, "displacement", false, "DISPLACEMENT");
        public final static Property ReleaseTime = new Property(6, String.class, "releaseTime", false, "RELEASE_TIME");
        public final static Property Weight = new Property(7, String.class, "weight", false, "WEIGHT");
        public final static Property Derailleur = new Property(8, String.class, "derailleur", false, "DERAILLEUR");
        public final static Property Gears = new Property(9, String.class, "gears", false, "GEARS");
        public final static Property Ftyre = new Property(10, String.class, "ftyre", false, "FTYRE");
        public final static Property Btyre = new Property(11, String.class, "btyre", false, "BTYRE");
        public final static Property FuelType = new Property(12, String.class, "fuelType", false, "FUEL_TYPE");
        public final static Property OilPrice = new Property(13, String.class, "oilPrice", false, "OIL_PRICE");
        public final static Property Tank = new Property(14, String.class, "tank", false, "TANK");
        public final static Property Blend = new Property(15, boolean.class, "blend", false, "BLEND");
        public final static Property StartStop = new Property(16, boolean.class, "startStop", false, "START_STOP");
        public final static Property CarAttr = new Property(17, String.class, "carAttr", false, "CAR_ATTR");
        public final static Property UserCode = new Property(18, String.class, "userCode", false, "USER_CODE");
        public final static Property BoxCode = new Property(19, String.class, "boxCode", false, "BOX_CODE");
        public final static Property IsCurrent = new Property(20, boolean.class, "isCurrent", false, "IS_CURRENT");
        public final static Property IsDefault = new Property(21, boolean.class, "isDefault", false, "IS_DEFAULT");
        public final static Property Count = new Property(22, int.class, "count", false, "COUNT");
        public final static Property BrandCname = new Property(23, String.class, "brandCname", false, "BRAND_CNAME");
        public final static Property BrandEname = new Property(24, String.class, "brandEname", false, "BRAND_ENAME");
        public final static Property Initial = new Property(25, String.class, "initial", false, "INITIAL");
        public final static Property CarTypeId = new Property(26, long.class, "carTypeId", false, "CAR_TYPE_ID");
    };


    public CarBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CarBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_CAR_ID\" TEXT," + // 1: userCarID
                "\"BRAND_LOGO\" TEXT," + // 2: brandLogo
                "\"CAR_SERIES_NAME\" TEXT," + // 3: carSeriesName
                "\"CAR_TYPE_NAME\" TEXT," + // 4: carTypeName
                "\"DISPLACEMENT\" TEXT," + // 5: displacement
                "\"RELEASE_TIME\" TEXT," + // 6: releaseTime
                "\"WEIGHT\" TEXT," + // 7: weight
                "\"DERAILLEUR\" TEXT," + // 8: derailleur
                "\"GEARS\" TEXT," + // 9: gears
                "\"FTYRE\" TEXT," + // 10: ftyre
                "\"BTYRE\" TEXT," + // 11: btyre
                "\"FUEL_TYPE\" TEXT," + // 12: fuelType
                "\"OIL_PRICE\" TEXT," + // 13: oilPrice
                "\"TANK\" TEXT," + // 14: tank
                "\"BLEND\" INTEGER NOT NULL ," + // 15: blend
                "\"START_STOP\" INTEGER NOT NULL ," + // 16: startStop
                "\"CAR_ATTR\" TEXT," + // 17: carAttr
                "\"USER_CODE\" TEXT," + // 18: userCode
                "\"BOX_CODE\" TEXT," + // 19: boxCode
                "\"IS_CURRENT\" INTEGER NOT NULL ," + // 20: isCurrent
                "\"IS_DEFAULT\" INTEGER NOT NULL ," + // 21: isDefault
                "\"COUNT\" INTEGER NOT NULL ," + // 22: count
                "\"BRAND_CNAME\" TEXT," + // 23: brandCname
                "\"BRAND_ENAME\" TEXT," + // 24: brandEname
                "\"INITIAL\" TEXT," + // 25: initial
                "\"CAR_TYPE_ID\" INTEGER NOT NULL );"); // 26: carTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCarID = entity.getUserCarID();
        if (userCarID != null) {
            stmt.bindString(2, userCarID);
        }
 
        String brandLogo = entity.getBrandLogo();
        if (brandLogo != null) {
            stmt.bindString(3, brandLogo);
        }
 
        String carSeriesName = entity.getCarSeriesName();
        if (carSeriesName != null) {
            stmt.bindString(4, carSeriesName);
        }
 
        String carTypeName = entity.getCarTypeName();
        if (carTypeName != null) {
            stmt.bindString(5, carTypeName);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(6, displacement);
        }
 
        String releaseTime = entity.getReleaseTime();
        if (releaseTime != null) {
            stmt.bindString(7, releaseTime);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
 
        String derailleur = entity.getDerailleur();
        if (derailleur != null) {
            stmt.bindString(9, derailleur);
        }
 
        String gears = entity.getGears();
        if (gears != null) {
            stmt.bindString(10, gears);
        }
 
        String ftyre = entity.getFtyre();
        if (ftyre != null) {
            stmt.bindString(11, ftyre);
        }
 
        String btyre = entity.getBtyre();
        if (btyre != null) {
            stmt.bindString(12, btyre);
        }
 
        String fuelType = entity.getFuelType();
        if (fuelType != null) {
            stmt.bindString(13, fuelType);
        }
 
        String oilPrice = entity.getOilPrice();
        if (oilPrice != null) {
            stmt.bindString(14, oilPrice);
        }
 
        String tank = entity.getTank();
        if (tank != null) {
            stmt.bindString(15, tank);
        }
        stmt.bindLong(16, entity.getBlend() ? 1L: 0L);
        stmt.bindLong(17, entity.getStartStop() ? 1L: 0L);
 
        String carAttr = entity.getCarAttr();
        if (carAttr != null) {
            stmt.bindString(18, carAttr);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(19, userCode);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(20, boxCode);
        }
        stmt.bindLong(21, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsDefault() ? 1L: 0L);
        stmt.bindLong(23, entity.getCount());
 
        String brandCname = entity.getBrandCname();
        if (brandCname != null) {
            stmt.bindString(24, brandCname);
        }
 
        String brandEname = entity.getBrandEname();
        if (brandEname != null) {
            stmt.bindString(25, brandEname);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(26, initial);
        }
        stmt.bindLong(27, entity.getCarTypeId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCarID = entity.getUserCarID();
        if (userCarID != null) {
            stmt.bindString(2, userCarID);
        }
 
        String brandLogo = entity.getBrandLogo();
        if (brandLogo != null) {
            stmt.bindString(3, brandLogo);
        }
 
        String carSeriesName = entity.getCarSeriesName();
        if (carSeriesName != null) {
            stmt.bindString(4, carSeriesName);
        }
 
        String carTypeName = entity.getCarTypeName();
        if (carTypeName != null) {
            stmt.bindString(5, carTypeName);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(6, displacement);
        }
 
        String releaseTime = entity.getReleaseTime();
        if (releaseTime != null) {
            stmt.bindString(7, releaseTime);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
 
        String derailleur = entity.getDerailleur();
        if (derailleur != null) {
            stmt.bindString(9, derailleur);
        }
 
        String gears = entity.getGears();
        if (gears != null) {
            stmt.bindString(10, gears);
        }
 
        String ftyre = entity.getFtyre();
        if (ftyre != null) {
            stmt.bindString(11, ftyre);
        }
 
        String btyre = entity.getBtyre();
        if (btyre != null) {
            stmt.bindString(12, btyre);
        }
 
        String fuelType = entity.getFuelType();
        if (fuelType != null) {
            stmt.bindString(13, fuelType);
        }
 
        String oilPrice = entity.getOilPrice();
        if (oilPrice != null) {
            stmt.bindString(14, oilPrice);
        }
 
        String tank = entity.getTank();
        if (tank != null) {
            stmt.bindString(15, tank);
        }
        stmt.bindLong(16, entity.getBlend() ? 1L: 0L);
        stmt.bindLong(17, entity.getStartStop() ? 1L: 0L);
 
        String carAttr = entity.getCarAttr();
        if (carAttr != null) {
            stmt.bindString(18, carAttr);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(19, userCode);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(20, boxCode);
        }
        stmt.bindLong(21, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsDefault() ? 1L: 0L);
        stmt.bindLong(23, entity.getCount());
 
        String brandCname = entity.getBrandCname();
        if (brandCname != null) {
            stmt.bindString(24, brandCname);
        }
 
        String brandEname = entity.getBrandEname();
        if (brandEname != null) {
            stmt.bindString(25, brandEname);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(26, initial);
        }
        stmt.bindLong(27, entity.getCarTypeId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CarBean readEntity(Cursor cursor, int offset) {
        CarBean entity = new CarBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCarID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // brandLogo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // carSeriesName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // carTypeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // displacement
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // releaseTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // derailleur
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gears
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ftyre
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // btyre
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fuelType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // oilPrice
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tank
            cursor.getShort(offset + 15) != 0, // blend
            cursor.getShort(offset + 16) != 0, // startStop
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // carAttr
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // userCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // boxCode
            cursor.getShort(offset + 20) != 0, // isCurrent
            cursor.getShort(offset + 21) != 0, // isDefault
            cursor.getInt(offset + 22), // count
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // brandCname
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // brandEname
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // initial
            cursor.getLong(offset + 26) // carTypeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCarID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBrandLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCarSeriesName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCarTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisplacement(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReleaseTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDerailleur(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGears(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFtyre(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBtyre(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFuelType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOilPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTank(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBlend(cursor.getShort(offset + 15) != 0);
        entity.setStartStop(cursor.getShort(offset + 16) != 0);
        entity.setCarAttr(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUserCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBoxCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsCurrent(cursor.getShort(offset + 20) != 0);
        entity.setIsDefault(cursor.getShort(offset + 21) != 0);
        entity.setCount(cursor.getInt(offset + 22));
        entity.setBrandCname(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBrandEname(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setInitial(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCarTypeId(cursor.getLong(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CarBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CarBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
